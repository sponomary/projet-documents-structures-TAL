<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="application/xml" href="stylesheet-exos.xsl"?>
<task>
    <exercice num="14.2">
        <title>Extraction dans les Fils RSS du Monde</title>
        <part num="3" title="XSLT">
            <question>
                <enonce num="1">Construire une feuille de styles pour afficher les contenus étiquetés des «titres» uniquement</enonce>
                <comment>On utilise ici les fils RSS de l’année 2020 étiquetés avec UDPipe dans le cours Projet Encadré. Moi, en l'occurrence, j'ai choisi la rubrique 3246 pour effectuer ce travail. Car UDPipe ne permet pas de sauvegarder le résultat étiqueté sous format XML (et pour travailler avec XSLT et XQuery on en a besoin), j'ai converti la sortie UDPipe originallement en CoNNL. Pour cela, j'ai utilisé le script Perl udpipe2xml-version-sans-titrevsdescription-v2.pl fourni en cours, je l'ai modifié de telle façon que le résultat généré ait une balise &lt;article&gt; de plus autour de chaque paire de titre-description. Pour 10 colonnes du format CoNNL j'ai crée des balises &lt;data&gt; (comme dans l'exemple avec la sortie TreeTagger), en ajoutant les noms des colonnes dans les attributs (id, forme, lemma, upos, xpos, feats, head, deprel, deps, misc). Ce script modifié est accessible ci-dessous.</comment>
                <comment>Le document de travail XML 3246 (2020) est volumineux (d'environ 76 Mo), les navigateurs peuvent avoir du mal à les afficher. Il est donc conseillé de le télécharger via le clic droit de la souris.</comment>
                <response>
                    <text>J'ai opté pour un tableau HTML pour afficher les contenus étiquetés des «titres» dans ce premier exercice. Chaque colonne du tableau correspond donc à une colonne du fichier CoNNL – 10 colonnes au total. On précise qu'on veut récupérer le contenu seulement des balises «titres» avec l'élément «xsl:for-each». Quant au style de la page HTML, on utilise toujours ce Framework open source Bootstrap v4.6. En plus des fichiers pour cet exercice, vous trouverez ci-dessous le script Perl udpipe2xml-version-sans-titrevsdescription-v3.pl modifié pour pouvoir convertir la sortie UDPipe en format XML.</text>
                    <list>
                        <element title="Transformation">xsltproc ex14-p3-q1.xsl sortieUD-regex_3246.xml > ex14-p3-q1.html </element>
                    </list>
                    <image name="./images/ex14-p3-q1.png" class="img-lg img-thumbnail rounded mx-auto d-block"/>
                    <file type="xml" name="./../ex14_oblig/UDPipe/sortieUD-regex_3246.xml" num=" 3246 (2020)"/>
                    <file type="perl" name="./../ex14_oblig/udpipe2xml-version-sans-titrevsdescription-v3.pl"/>
                    <file type="xsl" name="./../ex14_oblig/UDPipe/ex14-p3-q1.xsl"/>
                    <file type="html" name="./../ex14_oblig/UDPipe/ex14-p3-q1.html"/>
                </response>
            </question>
            <question>
                <enonce num="2">Peut-on envisager de construire une feuille de styles pour afficher chaque « titre » en regard de sa « description » : par exemple un tableau avec 2 colonnes, à gauche les titres et à droite les descriptions (un alignement en somme) ? si cela n’est pas possible directement, quel est l’alignement minimal que l’on peut mettre en œuvre ? Construire cet alignement minimal...</enonce>
                <comment>Le fichier de départ (la sortie TXT de la BàO 1 et BàO 2 du Projet Encadré) ne contenait pas le même nombre de titres et de descriptions (3 descriptions manquées). Pour pouvoir transformer notre fichier CoNNL en bon format, il fallait que le nombre de titres soit égal au nombre de descriptions. J'ai pris la décision de ne pas inclure les titres sans description dans le travail ce qui n'était peut-être pas la meilleure solution. Maintenant quand je pense à cela, il me semble que ça serait mieux de garder tous les infirmations en remplaçant des éléments manqués (en occurrence, une description correspondant à un titre) par un caractère « $ », par exemple. Une bonne idée arrive...en peu en retard.</comment>
                <response>
                    <text>Je voudrais préciser ici que dans mon cas particulier il n'y a aucun problème d'alignement possible car le nombre de titres égale au nombre de descriptions. J'affiche donc deux colonnes : les contenus des titres dans la colonne à gauche et les contenus des descriptions dans la colonne à droite. La mise en forme est assuré par Bootstrap v4.6. </text>
                    <list>
                        <element title="Transformation">xsltproc ex14-p3-q2.xsl sortieUD-regex_3246.xml > ex14-p3-q2.html </element>
                    </list>
                    <image name="./images/ex14-p3-q2.png" class="img-lg img-thumbnail rounded mx-auto d-block"/>
                    <file type="xsl" name="./../ex14_oblig/UDPipe/ex14-p3-q2.xsl"/>
                    <file type="html" name="./../ex14_oblig/UDPipe/ex14-p3-q2.html"/>
                </response>
            </question>
            <question>
                <enonce num="3">Construire des feuilles de style pour extraire (au format TXT) au moins 3 patrons morpho-syntaxiques (de longueurs différentes) sur les « titres » uniquement puis sur les « descriptions » uniquement</enonce>
                <response>
                    <text>Cette fois on a une seule feuille de style permettant d'extraire les 3 patrons morpho-syntaxiques suivants : 1) NOM-ADJ ; 2) DET-ADJ-NOM ; 3) VERBE-PREP-DET-NOM. De plus, l'extraction se passe d'abord sur les titres et puis sur les descriptions. On a créé une règle par patron et on fait l'appel à chaque règle 2 fois (une fois pour les balises &lt;titre&gt; et une fois pour les balises &lt;description&gt;).
                    </text>
                    <list>
                        <element title="Transformation">xsltproc ex14-p3-q3.xsl sortieUD-regex_3246.xml > ex14-p3-q3.txt</element>
                    </list>
                    <image name="./images/ex14-p3-q3.png" class="img-lg img-thumbnail rounded mx-auto d-block"/>
                    <file type="xsl" name="./../ex14_oblig/UDPipe/ex14-p3-q3.xsl"/>
                    <file type="txt" name="./../ex14_oblig/UDPipe/ex14-p3-q3.txt"/>
                </response>
            </question>
            <question>
                <enonce num="4">Construire une feuille de styles pour afficher les contenus étiquetés en mettant au jour un patron morpho-syntaxique sur les « titres » uniquement puis sur les « descriptions » uniquement</enonce>
                <response>
                    <text>J'ai opté pour l'affichage sous la forme de page HTML pour cette question. Encore une fois j'utilise un tableau HTML en plaçant les titres à gauche (en bleu) et les descriptions à droite (en noir). Le motif de notre patron est inclus dans une règle dont on fait l'appel deux fois (d'abord pour les titres et puis pour les descriptions). Le patron recherché est marqué par la couleur jaune, leur POS et lemme entre parenthèses.
                    </text>
                    <list>
                        <element title="Transformation">xsltproc ex14-p3-q4.xsl sortieUD-regex_3246.xml > ex14-p3-q4.html</element>
                    </list>
                    <image name="./images/ex14-p3-q4.png" class="img-lg img-thumbnail rounded mx-auto d-block"/>
                    <file type="xsl" name="./../ex14_oblig/UDPipe/ex14-p3-q4.xsl"/>
                    <file type="html" name="./../ex14_oblig/UDPipe/ex14-p3-q4.html"/>
                </response>
            </question>
            <question>
                <enonce num="5">Construire une feuille de styles pour extraire (au format TXT) les items en relation de dépendance syntaxique de type OBJ (les classer et les compter). Essayer de tenir compte de la différence titre/description</enonce>
                <response>
                    <text>Pour cet exercice on veut repérer tous les exemples de la relation syntaxique OBJ. Pour être plus précise, j'ai récupéré tous les compléments d'objet directs (obj) et aussi les compléments d'objet indirects (iobj). L'algorithme est assez simple : d'abord, on creé une variable pour la forme du dépendant, pour l'ID du dépendent, et aussi l'ID du gouverneur. Avec ces données on peut tester si le gouverneur précède ou suit le dépendant et enfin extraire les items. Le résultat d'extraction est ci-dessous, entre parenthèses se trouvent la relation (obj ou iobj) et la source (TITRE ou DESCR). Vu que les contenus des descriptions sont plus volumineux, les items les plus fréquents appartient en effet à cette balise.
                    </text>
                    <list>
                        <element title="Transformation">xsltproc ex14-p3-q5.xsl sortieUD-regex_3246.xml | sort | uniq -c | sort -gr > ex14-p3-q5.txt </element>
                    </list>
                    <image name="./images/ex14-p3-q5.png" class="img-md img-thumbnail rounded mx-auto d-block"/>
                    <file type="xsl" name="./../ex14_oblig/UDPipe/ex14-p3-q5.xsl"/>
                    <file type="txt" name="./../ex14_oblig/UDPipe/ex14-p3-q5.txt"/>
                </response>
            </question>
            <question>
                <enonce num="6">Construire une feuille de styles pour extraire la liste des POS en relation de dépendance syntaxique de type OBJ (les classer et les compter)</enonce>
                <response>
                    <text>Cette fois, on fait quasiment la même chose que dans la question précédente, sauf qu'on veut afficher les POS (et non les formes). Pour l'affichage plus clair, on a ajouté une flèche à partir du gouverneur vers le dépendant (son complément d'objet en occurrence).
                    </text>
                    <list>
                        <element title="Transformation">xsltproc ex14-p3-q6.xsl sortieUD-regex_3246.xml | sort | uniq -c | sort -gr > ex14-p3-q6.txt </element>
                    </list>
                    <image name="./images/ex14-p3-q6.png" class="img-md img-thumbnail rounded mx-auto d-block"/>
                    <file type="xsl" name="./../ex14_oblig/UDPipe/ex14-p3-q6.xsl"/>
                    <file type="txt" name="./../ex14_oblig/UDPipe/ex14-p3-q6.txt"/>
                </response>
            </question>
        </part>
        <part num="4" title="XQuery, via BaseX">
            <question>
                <enonce num="1">Construire une requête pour compter le nombre de titres, le nombre de descriptions</enonce>
                <response>
                    <text>Comme d'habitude, j'ai commencé par constituer une base de données sur BaseX à partir du document fourni. Pour pouvoir extraire les contenus textuels des balises &lt;title&gt; sur l'ensemble du corpus, on commence par créer une variable $titre qui va nous permettre d'atteindre les balises qu'on souhaite. On va concaténer chaque forme extraite avec la fonctionnalité string-join(), avec l'espace comme un délimiteur, et stocker le résultat dans la variable $data.</text>
                    <image name="./images/ex14-p4-q1-requete.png" class="img-lg img-thumbnail rounded mx-auto d-block"/>
                    <image name="./images/ex14-p4-q1.png" class="img-lg img-thumbnail rounded mx-auto d-block"/>
                    <file type="xq" name="./../ex14_oblig/UDPipe/ex14-p4-q1.xq"/>
                    <file type="xml" name="./../ex14_oblig/UDPipe/ex14-p4-q1.xml"/>
                </response>
            </question>
            <question>
                <enonce num="2">Construire une requête pour extraire les contenus textuels des « titres »</enonce>
                <response>
                    <text>La question est en fait identique à la question précédente. La seule chose à changer, c'est la balise qu'on veut atteindre – &lt;description&gt;.</text>
                    <image name="./images/ex14-p4-q2-requete.png" class="img-lg img-thumbnail rounded mx-auto d-block"/>
                    <image name="./images/ex14-p4-q2.png" class="img-lg img-thumbnail rounded mx-auto d-block"/>
                    <file type="xq" name="./../ex14_oblig/UDPipe/ex14-p4-q2.xq"/>
                    <file type="xml" name="./../ex14_oblig/UDPipe/ex14-p4-q2.xml"/>
                </response>
            </question>
            <question>
                <enonce num="3">Construire une requête pour extraire les contenus textuels des « descriptions »</enonce>
                <response>
                    <text>Cette fois, on construit une requête à partir de deux requêtes précédentes. On récupère de deux balises &lt;titre&gt; et &lt;description&gt; et on concatène leurs contenus. Pour afficher le résultat, on a ajouté la balise &lt;item&gt; pour délimiter chaque article et donc paire titre-description. BaseX nous renvoie donc comme résultat le contenu des variables $titre et $description, encadré par des balises &lt;item&gt; comme dans l'image ci-dessous.</text>
                    <image name="./images/ex14-p4-q3-requete.png" class="img-lg img-thumbnail rounded mx-auto d-block"/>
                    <image name="./images/ex14-p4-q3.png" class="img-lg img-thumbnail rounded mx-auto d-block"/>
                    <file type="xq" name="./../ex14_oblig/UDPipe/ex14-p4-q3.xq"/>
                    <file type="xml" name="./../ex14_oblig/UDPipe/ex14-p4-q3.xml"/>
                </response>
            </question>
            <question>
                <enonce num="4">Construire une requête pour extraire les contenus textuels des titres ET des descriptions</enonce>
                <response>
                    <text>Ici on parcourt chaque article du document (ce qui correspond aux titres et aux descriptions) puis chaque élément de ces articles (donc chaque ligne contenant les informations POS, lemme, token...). On stocke la valeur de la POS de l'élément suivant grâce à fonctionnalité «following-sibling». Quand la POS de l'élément et celle de l'élément suivant correspondent au patron, on renvoie en résultat la valeur des tokens.</text>
                    <image name="./images/ex14-p4-q4-requete.png" class="img-lg img-thumbnail rounded mx-auto d-block"/>
                    <image name="./images/ex14-p4-q4.png" class="img-lg img-thumbnail rounded mx-auto d-block"/>
                    <file type="xq" name="./../ex14_oblig/UDPipe/ex14-p4-q4.xq"/>
                    <file type="xml" name="./../ex14_oblig/UDPipe/ex14-p4-q4.xml"/>
                </response>
            </question>
            <question>
                <enonce num="5">Construire une requête pour extraire au moins 3 patrons morpho-syntaxiques (de longueurs différentes)</enonce>
                <response>
                    <text>La requête fonctionne de la même manière que dans la question précédente. Cependant, car le patron recherché est d'une autre longueur, on ajoute une autre variable, $next_element2, qui permet de tester la valeur de la POS du deuxième élément suivant puis d'en récupérer le token si tout correspond au patron syntaxique.</text>
                    <image name="./images/ex14-p4-q5-requete.png" class="img-lg img-thumbnail rounded mx-auto d-block"/>
                    <image name="./images/ex14-p4-q5.png" class="img-lg img-thumbnail rounded mx-auto d-block"/>
                    <file type="xq" name="./../ex14_oblig/UDPipe/ex14-p4-q5.1.xq" num=" 1"/>
                    <file type="xq" name="./../ex14_oblig/UDPipe/ex14-p4-q5.2.xq" num=" 2"/>
                    <file type="xq" name="./../ex14_oblig/UDPipe/ex14-p4-q5.3.xq" num=" 3"/>
                    <file type="xml" name="./../ex14_oblig/UDPipe/ex14-p4-q5.1.xml" num=" 1"/>
                    <file type="xml" name="./../ex14_oblig/UDPipe/ex14-p4-q5.2.xml" num=" 2"/>
                    <file type="xml" name="./../ex14_oblig/UDPipe/ex14-p4-q5.3.xml" num=" 3"/>
                </response>
            </question>
            <question>
                <enonce num="6">Construire une requête pour extraire les items portant une relation de dépendance syntaxique de type OBJ</enonce>
                <response>
                    <text>Pour extraire les formes portant une relation de dépendance de type OBJ, j'ai simplement extrait tous les contenus de la deuxième balise &lt;data type='form'&gt; dont la 8ème balise &lt;data type='deprel'&gt; contient la séquence «obj». J'ai choisi d'afficher le résultat sous la forme d'un fichier XML.</text>
                    <image name="./images/ex14-p4-q6-requete.png" class="img-lg img-thumbnail rounded mx-auto d-block"/>
                    <image name="./images/ex14-p4-q6.png" class="img-md img-thumbnail rounded mx-auto d-block"/>
                    <file type="xq" name="./../ex14_oblig/UDPipe/ex14-p4-q6.xq"/>
                    <file type="xml" name="./../ex14_oblig/UDPipe/ex14-p4-q6.xml"/>
                </response>
            </question>
            <question>
                <enonce num="7">Construire une requête pour extraire les items en relation de dépendance syntaxique de type SUB (on affichera les formes ou les lemmes connectés par cette relation)</enonce>
                <response>
                    <text>Cette fois, pour chaque 8ème balise &lt;data type='deprel'&gt; contenant la séquence «nsubj», je récupère sa forme, sa position et la position de son gouverneur. Sachant la position du gouverneur, je trouve sa forme et je concatène la forme du dépendant avec la forme du gouverneur. Tous ces items en dépendance syntaxique de type SUB sont sauvegardé dans le fichier XML comme dans les questions précédentes. </text>
                    <image name="./images/ex14-p4-q7-requete.png" class="img-lg img-thumbnail rounded mx-auto d-block"/>
                    <image name="./images/ex14-p4-q7.png" class="img-md img-thumbnail rounded mx-auto d-block"/>
                    <file type="xq" name="./../ex14_oblig/UDPipe/ex14-p4-q7.xq"/>
                    <file type="xml" name="./../ex14_oblig/UDPipe/ex14-p4-q7.xml"/>
                </response>
            </question>
        </part>
    </exercice>
</task>